// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// project
type Project struct {
	// ID
	ID string `json:"id"`
	// プロジェクト名
	Name string `json:"name"`
	// プロジェクトの内容
	Description *string `json:"description"`
	// プロジェクト作成日
	CreatedAt string `json:"createdAt"`
	// プロジェクト更新日
	UpdatedAt string `json:"updatedAt"`
	// プロジェクト完了ステータス
	Completed CompletedType `json:"completed"`
}

// project パラメータ
type ProjectInput struct {
	// ID
	ID string `json:"id"`
	// プロジェクト名
	Name string `json:"name"`
	// プロジェクトの内容
	Description *string `json:"description"`
	// プロジェクト完了ステータス
	Completed CompletedType `json:"completed"`
}

// Completed タイプ
type CompletedType string

const (
	// 完了
	CompletedTypeComplete CompletedType = "COMPLETE"
	// 未完了
	CompletedTypeNotcomplete CompletedType = "NOTCOMPLETE"
)

var AllCompletedType = []CompletedType{
	CompletedTypeComplete,
	CompletedTypeNotcomplete,
}

func (e CompletedType) IsValid() bool {
	switch e {
	case CompletedTypeComplete, CompletedTypeNotcomplete:
		return true
	}
	return false
}

func (e CompletedType) String() string {
	return string(e)
}

func (e *CompletedType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompletedType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompletedType", str)
	}
	return nil
}

func (e CompletedType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
